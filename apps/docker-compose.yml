version: "3.3"

services:
  reverse-proxy-server:
    image: jc21/nginx-proxy-manager:latest
    container_name: Reverse-Proxy-Server
    restart: always
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    deploy:
      resources:
        limits:
          memory: 200M

  rabbitmq:
    image: rabbitmq:3.12.6-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    hostname: rabbitmq-server
    restart: always
    networks:
      - frontend
    environment:
      - RABBITMQ_DEFAULT_USER=appuser
      - RABBITMQ_DEFAULT_PASS=adminPassword
    cap_add:
      - ALL
    ulimits:
      nofile:
        soft: 2000
        hard: 2000
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          memory: 300M
    # labels:
    #   - traefik.enable=true

  portainer:
    image: portainer/portainer-ce:2.19.1
    container_name: portainer
    restart: always
    security_opt:
      - no-new-privileges:true
    ports:
      - 9000:9000
      - 9443:9443
    networks:
      - frontend
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    deploy:
      resources:
        limits:
          memory: 150M
    # labels:
    #   - "traefik.enable=true"

  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin
  #   restart: always
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=gematmail@gmail.com
  #     - PGADMIN_DEFAULT_PASSWORD=adminPassword
  #   networks:
  #     - frontend
  #   volumes:
  #     - pgadmin_data:/root/.pgadmin
  #   labels:
  #     - "traefik.enable=true"
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 200M

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: always
    networks:
      - frontend
    volumes:
      - uptime_kuma_data:/app/data
    deploy:
      resources:
        limits:
          memory: 100M
    # labels:
    #   - "traefik.enable=true"

  seq:
    image: datalust/seq
    container_name: seq-server
    restart: always
    environment:
      - ACCEPT_EULA=Y
    volumes:
      - seq_data:/data
    networks:
      - frontend
    ports:
      - 5555:80
    deploy:
      resources:
        limits:
          memory: 250M
    # labels:
    #   - "traefik.enable=true"

  # heimdall:
  #   image: linuxserver/heimdall:2.5.6
  #   container_name: heimdall
  #   restart: always
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Asia/Shanghai
  #   volumes:
  #     - ./heimdall/config:/config
  #   ports:
  #     - 7080:80
  #     - 7443:443
  #   networks:
  #     - frontend
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.heimdall.tls=true"
  #     - "traefik.http.routers.heimdall.entrypoints=web"
  #     - "traefik.http.routers.heimdall.rule=Host(`heimdall.ideaslab.com`)"
  #     - "traefik.http.routers.heimdall.middlewares=heimdall-https-redirect"
  #     - "traefik.http.routers.heimdall-secure.entrypoints=websecure"
  #     - "traefik.http.routers.heimdall-secure.rule=Host(`heimdall.ideaslab.com`)"
  #     - "traefik.http.routers.heimdall-secure.tls=true"
  #     - "traefik.http.routers.heimdall-secure.tls.certresolver=staging"
  #     - "traefik.http.routers.heimdall-secure.service=heimdall"
  #     - "traefik.http.middlewares.heimdall-https-redirect.redirectscheme.scheme=https"
  #     - "traefik.http.services.heimdall.loadbalancer.server.port=80"
  #     - "traefik.docker.network=frontend"

  sonarqube:
    image: sonarqube:10.2.1-community
    container_name: sonarqube
    restart: always
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://postgres-server:5432/sonar
      - SONAR_JDBC_USERNAME=appuser
      - SONAR_JDBC_PASSWORD=adminPassword
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_data:/opt/sonarqube/logs
      - sonarqube_data:/opt/sonarqube/extensions
    ports:
      - 9900:9000
    networks:
      - frontend
      - database-net
    deploy:
      resources:
        limits:
          memory: 2G
    # labels:
    #   - "traefik.enable=true"

  # jenkins:
  #   build:
  #     context: ./jenkins
  #     dockerfile: Dockerfile
  #   image: gematt/jenkins-blueocean:2.425-jdk21
  #   container_name: jenkins
  #   restart: always
  #   environment:
  #     # - "JAVA_OPTS=-Djava.util.logging.config.file=/var/jenkins_home/log.properties"
  #     - DOCKER_CERT_PATH=/certs/client
  #     - DOCKER_TLS_VERIFY=1A
  #   volumes:
  #     - jenkins-data:/var/jenkins_home
  #     - jenkins-docker-certs:/certs/client:ro
  #   ports:
  #     - 50001:8080
  #     - 50000:50000
  #   networks:
  #     - frontend
  # labels:
  #   - "traefik.enable=true"
  # deploy:
  #     resources:
  #       limits:
  #         memory: 2G

  # socat:
  #   image: alpine/socat
  #   container_name: socat
  #   restart: always
  #   ports:
  #     - 127.0.0.1:2376:2375
  #   command: tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock
  #   networks:
  #     - frontend
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock

volumes:
  portainer_data:
  pgadmin_data:
  uptime_kuma_data:
  seq_data:
  sonarqube_data:
  rabbitmq_data:
  # jenkins-data:
  # jenkins-docker-certs:

networks:
  frontend:
    external: true
  database-net:
    external:
      name: database_network
