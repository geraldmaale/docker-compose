---
version: '3.9'
x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

networks:
  default:
    name: grafana-opentel
    driver: bridge

services:

  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    restart: always
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
  
  promtail:
    image: grafana/promtail:2.8.2
    restart: always
    container_name: promtail
    volumes:
      - ./promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml

  flog:
    image: mingrammer/flog
    container_name: flog
    command: -f json -d 1s -l
    
  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    restart: always
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - "GF_LOG_MODE=console file"
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false      
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - loki

  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    restart: always
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "16685:16685"
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    deploy:
      resources:
        limits:
          memory: 300M
    logging: *logging

  # zipkin:
  #   image: openzipkin/zipkin
  #   container_name: zipkin
  #   restart: always
  #   ports:
  #     - "9411:9411"
  #   networks:
  #     - loki

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    deploy:
      resources:
        limits:
          memory: 300M
    logging: *logging

  otelcol:
    image: otel/opentelemetry-collector-contrib
    container_name: otelcol
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      # - "4317:4317"   # OTLP gRPC receiver
      # - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
      - "3500:3500" # loki receiver HTTP
    depends_on:
      - jaeger
    deploy:
      resources:
        limits:
          memory: 300M
    logging: *logging

volumes:
  grafana-data:
  prometheus-data: